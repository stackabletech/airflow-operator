---
apiVersion: batch/v1
kind: Job
metadata:
  name: access-airflow
spec:
  template:
    spec:
      serviceAccountName: test-sa
      containers:
        - name: access-airflow
{% if test_scenario['values']['airflow'].find(",") > 0 %}
          image: "{{ test_scenario['values']['airflow'].split(',')[1] }}"
{% else %}
          image: oci.stackable.tech/sdp/airflow:{{ test_scenario['values']['airflow'] }}-stackable0.0.0-dev
{% endif %}
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - /tmp/script/script.sh
          env:
            - name: SCHEDULER_METRICS
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-scheduler-default-0.metrics
            - name: WORKER_0_METRICS
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-worker-default-0.metrics
            - name: WORKER_1_METRICS
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-worker-default-1.metrics
            - name: WEBSERVER_DEFAULT_HTTP
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-webserver-default-0.http
            - name: WEBSERVER_DEFAULT_METRICS
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-webserver-default-0.metrics
            - name: WEBSERVER_EXTERNAL_HTTP
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-webserver-external-unstable-0.http
            - name: WEBSERVER_EXTERNAL_METRICS
              valueFrom:
                configMapKeyRef:
                  name: airflow
                  key: airflow-webserver-external-unstable-0.metrics
          volumeMounts:
            - name: script
              mountPath: /tmp/script
      volumes:
        - name: script
          configMap:
            name: access-airflow-script
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: access-airflow-script
data:
  script.sh: |
    set -euxo pipefail

    echo "Attempting to reach scheduler at $SCHEDULER_METRICS..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${SCHEDULER_METRICS}" | grep 200

    echo "Attempting to reach worker at $WORKER_0_METRICS..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WORKER_0_METRICS}" | grep 200

    echo "Attempting to reach worker at $WORKER_1_METRICS..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WORKER_1_METRICS}" | grep 200

    echo "Attempting to reach webserver at $WEBSERVER_DEFAULT_HTTP..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WEBSERVER_DEFAULT_HTTP}" | grep 200

    echo "Attempting to reach webserver at $WEBSERVER_DEFAULT_METRICS..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WEBSERVER_DEFAULT_METRICS}" | grep 200

    echo "Attempting to reach webserver at $WEBSERVER_EXTERNAL_HTTP..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WEBSERVER_EXTERNAL_HTTP}" | grep 200

    echo "Attempting to reach webserver at $WEBSERVER_EXTERNAL_METRICS..."
    curl --retry 0 -f -s -o /dev/null -w "%{http_code}" "${WEBSERVER_EXTERNAL_METRICS}" | grep 200

    echo "All tests successful!"
