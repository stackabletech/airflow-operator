apiVersion: kuttl.dev/v1beta1
kind: TestStep
metadata:
  name: install-airflow-db
timeout: 480
---
apiVersion: v1
kind: Secret
metadata:
  name: test-airflow-credentials
type: Opaque
stringData:
  adminUser.username: airflow
  adminUser.firstname: Airflow
  adminUser.lastname: Admin
  adminUser.email: airflow@airflow.com
  adminUser.password: airflow
  connections.secretKey: thisISaSECRET_1234
  connections.sqlalchemyDatabaseUri: postgresql+psycopg2://airflow:airflow@airflow-postgresql/airflow
{% if test_scenario['values']['executor'] == 'celery' %}
  connections.celeryResultBackend: db+postgresql://airflow:airflow@airflow-postgresql/airflow
  connections.celeryBrokerUrl: redis://:redis@airflow-redis-master:6379/0
{% endif %}
---
apiVersion: airflow.stackable.tech/v1alpha1
kind: AirflowCluster
metadata:
  name: airflow
spec:
  image:
{% if test_scenario['values']['airflow'].find(",") > 0 %}
    custom: "{{ test_scenario['values']['airflow'].split(',')[1] }}"
    productVersion: "{{ test_scenario['values']['airflow'].split(',')[0] }}"
{% else %}
    productVersion: "{{ test_scenario['values']['airflow'] }}"
{% endif %}
    pullPolicy: IfNotPresent
  clusterConfig:
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
    loadExamples: true
    credentialsSecret: test-airflow-credentials
  webservers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    configOverrides:
      webserver_config.py:
        EXPERIMENTAL_FILE_HEADER: |
          COMMON_HEADER_VAR = "role-value"
          ROLE_HEADER_VAR = "role-value"
        EXPERIMENTAL_FILE_FOOTER: |
          ROLE_FOOTER_VAR = "role-value"
        WTF_CSRF_ENABLED: "False"
        AUTH_ROLES_SYNC_AT_LOGIN: "true"
        AUTH_USER_REGISTRATION: "false"
        AUTH_USER_REGISTRATION_ROLE: "Role"
        OAUTH_PROVIDERS: |
          [
            { 'name': 'azure',
              'icon': 'fa-windows',
              'token_key': 'access_token',
              'remote_app': {
                'client_id': os.environ.get('OIDC_XXX_CLIENT_ID'),
                'client_secret': os.environ.get('OIDC_XXX_CLIENT_SECRET'),
                'client_kwargs': {
                  'scope': 'openid profile'
                },
                'api_base_url': 'https://keycloak/realms/sdp/protocol/test-url',
                'server_metadata_url': 'https://keycloak/realms/sdp/.well-known/openid-configuration-test',
              },
            }
          ]
    roleGroups:
      default:
        replicas: 1
        configOverrides:
          webserver_config.py:
            EXPERIMENTAL_FILE_HEADER: |
              COMMON_HEADER_VAR = "group-value"
            AUTH_USER_REGISTRATION_ROLE: "Rolegroup"
{% if test_scenario['values']['executor'] == 'celery' %}
  celeryExecutors:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 2
{% elif test_scenario['values']['executor'] == 'kubernetes' %}
  kubernetesExecutors:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
{% endif %}
  schedulers:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
    roleGroups:
      default:
        replicas: 1
